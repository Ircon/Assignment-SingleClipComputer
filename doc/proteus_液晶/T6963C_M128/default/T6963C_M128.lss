
T6963C_M128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000780  00800100  000002f2  00000366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000750  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000005f  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00001297  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000ae  00000000  00000000  000012b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000826  00000000  00000000  00001365  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001fb  00000000  00000000  00001b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000437  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000021c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000e5  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e3  00000000  00000000  00002355  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	18 e0       	ldi	r17, 0x08	; 8
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 38       	cpi	r26, 0x80	; 128
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	18 e0       	ldi	r17, 0x08	; 8
  b4:	a0 e8       	ldi	r26, 0x80	; 128
  b6:	b8 e0       	ldi	r27, 0x08	; 8
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 38       	cpi	r26, 0x80	; 128
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 33 01 	call	0x266	; 0x266 <main>
  c6:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Del>:
	函数调用变量：	无       
***********************************/
void Del(unsigned int j)
{
	while(j--);
}
  ce:	08 95       	ret

000000d0 <st01>:
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
  d0:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
  d4:	83 70       	andi	r24, 0x03	; 3
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	d9 f7       	brne	.-10     	; 0xd0 <st01>
}
  da:	08 95       	ret

000000dc <Write_Data>:
	函数调用入口:	Write_Data(dat)        
	函数参数:		dat              
	函数调用变量：	无       
***********************************/
void Write_Data(unsigned char dat)
{
  dc:	98 2f       	mov	r25, r24
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
  de:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
  e2:	83 70       	andi	r24, 0x03	; 3
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	d9 f7       	brne	.-10     	; 0xde <Write_Data+0x2>
	函数调用变量：	无       
***********************************/
void Write_Data(unsigned char dat)
{
	st01();
	DADDR=dat;
  e8:	90 93 00 14 	sts	0x1400, r25
}
  ec:	08 95       	ret

000000ee <Write_Command>:
	函数调用入口:		Write_Command(cmd)      
	函数参数:			cmd              
	函数调用变量：		无       
***********************************/
void Write_Command(unsigned char cmd)
{
  ee:	98 2f       	mov	r25, r24
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
  f0:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
  f4:	83 70       	andi	r24, 0x03	; 3
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	d9 f7       	brne	.-10     	; 0xf0 <Write_Command+0x2>
	函数调用变量：		无       
***********************************/
void Write_Command(unsigned char cmd)
{
	st01();
	CADDR=cmd;
  fa:	90 93 00 15 	sts	0x1500, r25
}
  fe:	08 95       	ret

00000100 <Write_Command1>:
	函数调用入口:		Write_Command(dat,cmd)      
	函数参数:			dat,cmd             
	函数调用变量：		无       
***********************************/
void Write_Command1(unsigned char dat,unsigned char cmd)
{
 100:	98 2f       	mov	r25, r24
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 102:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 106:	83 70       	andi	r24, 0x03	; 3
 108:	83 30       	cpi	r24, 0x03	; 3
 10a:	d9 f7       	brne	.-10     	; 0x102 <Write_Command1+0x2>
	函数调用变量：	无       
***********************************/
void Write_Data(unsigned char dat)
{
	st01();
	DADDR=dat;
 10c:	90 93 00 14 	sts	0x1400, r25
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 110:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 114:	83 70       	andi	r24, 0x03	; 3
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	d9 f7       	brne	.-10     	; 0x110 <Write_Command1+0x10>
	函数调用变量：		无       
***********************************/
void Write_Command(unsigned char cmd)
{
	st01();
	CADDR=cmd;
 11a:	60 93 00 15 	sts	0x1500, r22
***********************************/
void Write_Command1(unsigned char dat,unsigned char cmd)
{
	Write_Data(dat);
	Write_Command(cmd);
}
 11e:	08 95       	ret

00000120 <Write_Command2>:
	函数调用入口:		Write_Command2(dat,dat1,cmd)      
	函数参数:			dat,dat1,cmd              
	函数调用变量：		无        
***********************************/
void Write_Command2(unsigned char dat,unsigned char dat1,unsigned char cmd)
{
 120:	98 2f       	mov	r25, r24
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 122:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 126:	83 70       	andi	r24, 0x03	; 3
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	d9 f7       	brne	.-10     	; 0x122 <Write_Command2+0x2>
	函数调用变量：	无       
***********************************/
void Write_Data(unsigned char dat)
{
	st01();
	DADDR=dat;
 12c:	90 93 00 14 	sts	0x1400, r25
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 130:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 134:	83 70       	andi	r24, 0x03	; 3
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	d9 f7       	brne	.-10     	; 0x130 <Write_Command2+0x10>
	函数调用变量：	无       
***********************************/
void Write_Data(unsigned char dat)
{
	st01();
	DADDR=dat;
 13a:	60 93 00 14 	sts	0x1400, r22
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 13e:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 142:	83 70       	andi	r24, 0x03	; 3
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	d9 f7       	brne	.-10     	; 0x13e <Write_Command2+0x1e>
	函数调用变量：		无       
***********************************/
void Write_Command(unsigned char cmd)
{
	st01();
	CADDR=cmd;
 148:	40 93 00 15 	sts	0x1500, r20
void Write_Command2(unsigned char dat,unsigned char dat1,unsigned char cmd)
{
	Write_Data(dat);
	Write_Data(dat1);
	Write_Command(cmd);
}
 14c:	08 95       	ret

0000014e <Lcd_Port_Init>:
	函数参数:			无               
	函数调用变量：		无       
***********************************/
void Lcd_Port_Init(void)
{
	MCUCR = 0x80; // 允许外部并行扩展接口 
 14e:	80 e8       	ldi	r24, 0x80	; 128
 150:	85 bf       	out	0x35, r24	; 53
	XMCRA = 0x00; // external memory 
 152:	10 92 6d 00 	sts	0x006D, r1
	XMCRB = 0x05; // 释放PC7,PC6，PC5，PC4，PC3，作为通用I/O引脚使用 
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	80 93 6c 00 	sts	0x006C, r24
}
 15c:	08 95       	ret

0000015e <Lcd_Init>:
	函数参数:			无               
	函数调用变量：		无           
***********************************/
void Lcd_Init(void)
{
	DDRC=0xff;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;			//LCD 复位
 162:	15 ba       	out	0x15, r1	; 21
	Del(50000);
	PORTC=0xff;			//LCD 复位结束
 164:	85 bb       	out	0x15, r24	; 21
	函数参数:			无               
	函数调用变量：		无       
***********************************/
void Lcd_Port_Init(void)
{
	MCUCR = 0x80; // 允许外部并行扩展接口 
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	85 bf       	out	0x35, r24	; 53
	XMCRA = 0x00; // external memory 
 16a:	10 92 6d 00 	sts	0x006D, r1
	XMCRB = 0x05; // 释放PC7,PC6，PC5，PC4，PC3，作为通用I/O引脚使用 
 16e:	85 e0       	ldi	r24, 0x05	; 5
 170:	80 93 6c 00 	sts	0x006C, r24
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 174:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 178:	83 70       	andi	r24, 0x03	; 3
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	d9 f7       	brne	.-10     	; 0x174 <Lcd_Init+0x16>
	函数调用变量：	无       
***********************************/
void Write_Data(unsigned char dat)
{
	st01();
	DADDR=dat;
 17e:	10 92 00 14 	sts	0x1400, r1
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 182:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 186:	83 70       	andi	r24, 0x03	; 3
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	d9 f7       	brne	.-10     	; 0x182 <Lcd_Init+0x24>
	函数调用变量：	无       
***********************************/
void Write_Data(unsigned char dat)
{
	st01();
	DADDR=dat;
 18c:	10 92 00 14 	sts	0x1400, r1
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 190:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 194:	83 70       	andi	r24, 0x03	; 3
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	d9 f7       	brne	.-10     	; 0x190 <Lcd_Init+0x32>
	函数调用变量：		无       
***********************************/
void Write_Command(unsigned char cmd)
{
	st01();
	CADDR=cmd;
 19a:	82 e4       	ldi	r24, 0x42	; 66
 19c:	80 93 00 15 	sts	0x1500, r24
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 1a0:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 1a4:	83 70       	andi	r24, 0x03	; 3
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	d9 f7       	brne	.-10     	; 0x1a0 <Lcd_Init+0x42>
	函数调用变量：	无       
***********************************/
void Write_Data(unsigned char dat)
{
	st01();
	DADDR=dat;
 1aa:	8e e1       	ldi	r24, 0x1E	; 30
 1ac:	80 93 00 14 	sts	0x1400, r24
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 1b0:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 1b4:	83 70       	andi	r24, 0x03	; 3
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <Lcd_Init+0x52>
	函数调用变量：	无       
***********************************/
void Write_Data(unsigned char dat)
{
	st01();
	DADDR=dat;
 1ba:	10 92 00 14 	sts	0x1400, r1
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 1be:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 1c2:	83 70       	andi	r24, 0x03	; 3
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	d9 f7       	brne	.-10     	; 0x1be <Lcd_Init+0x60>
	函数调用变量：		无       
***********************************/
void Write_Command(unsigned char cmd)
{
	st01();
	CADDR=cmd;
 1c8:	83 e4       	ldi	r24, 0x43	; 67
 1ca:	80 93 00 15 	sts	0x1500, r24
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 1ce:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 1d2:	83 70       	andi	r24, 0x03	; 3
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	d9 f7       	brne	.-10     	; 0x1ce <Lcd_Init+0x70>
	函数调用变量：		无       
***********************************/
void Write_Command(unsigned char cmd)
{
	st01();
	CADDR=cmd;
 1d8:	87 ea       	ldi	r24, 0xA7	; 167
 1da:	80 93 00 15 	sts	0x1500, r24
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 1de:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 1e2:	83 70       	andi	r24, 0x03	; 3
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	d9 f7       	brne	.-10     	; 0x1de <Lcd_Init+0x80>
	函数调用变量：		无       
***********************************/
void Write_Command(unsigned char cmd)
{
	st01();
	CADDR=cmd;
 1e8:	80 e8       	ldi	r24, 0x80	; 128
 1ea:	80 93 00 15 	sts	0x1500, r24
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 1ee:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 1f2:	83 70       	andi	r24, 0x03	; 3
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	d9 f7       	brne	.-10     	; 0x1ee <Lcd_Init+0x90>
	函数调用变量：		无       
***********************************/
void Write_Command(unsigned char cmd)
{
	st01();
	CADDR=cmd;
 1f8:	88 e9       	ldi	r24, 0x98	; 152
 1fa:	80 93 00 15 	sts	0x1500, r24
// 	Wrint_Command2( 0x00,0x00,0x42 ); //设置图形显示区域首地址GraphAddr
// 	Wrint_Command2( 0x10,0x00,0x43); //设置图形显示区域宽度:10H
	Write_Command(0xa7); //设置光标形状 cursor size 8x8
	Write_Command(0x80); //设置显示方式: CGROM方式 文本\图形 "或"
	Write_Command(0x98); //设置显示开关: 1001 1100 图形
}
 1fe:	08 95       	ret

00000200 <Show_Bmp_240x64>:
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
void Show_Bmp_240x64(unsigned char bmpdata [])
{
 200:	ac 01       	movw	r20, r24
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 202:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 206:	83 70       	andi	r24, 0x03	; 3
 208:	83 30       	cpi	r24, 0x03	; 3
 20a:	d9 f7       	brne	.-10     	; 0x202 <Show_Bmp_240x64+0x2>
	函数调用变量：	无       
***********************************/
void Write_Data(unsigned char dat)
{
	st01();
	DADDR=dat;
 20c:	10 92 00 14 	sts	0x1400, r1
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 210:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 214:	83 70       	andi	r24, 0x03	; 3
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	d9 f7       	brne	.-10     	; 0x210 <Show_Bmp_240x64+0x10>
	函数调用变量：	无       
***********************************/
void Write_Data(unsigned char dat)
{
	st01();
	DADDR=dat;
 21a:	10 92 00 14 	sts	0x1400, r1
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 21e:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 222:	83 70       	andi	r24, 0x03	; 3
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	d9 f7       	brne	.-10     	; 0x21e <Show_Bmp_240x64+0x1e>
	函数调用变量：		无       
***********************************/
void Write_Command(unsigned char cmd)
{
	st01();
	CADDR=cmd;
 228:	82 e4       	ldi	r24, 0x42	; 66
 22a:	80 93 00 15 	sts	0x1500, r24
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
{
	unsigned int i;
	Write_Command2( 0x00,0x00,0x42 ); //设置图形显示区域首地址GraphAddr
	for(i=0;i<1920;i++)
	{
		Write_Command1(bmpdata[i],0xc0);
 232:	90 ec       	ldi	r25, 0xC0	; 192
 234:	fa 01       	movw	r30, r20
 236:	e2 0f       	add	r30, r18
 238:	f3 1f       	adc	r31, r19
 23a:	e0 81       	ld	r30, Z
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 23c:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 240:	83 70       	andi	r24, 0x03	; 3
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	d9 f7       	brne	.-10     	; 0x23c <Show_Bmp_240x64+0x3c>
	函数调用变量：	无       
***********************************/
void Write_Data(unsigned char dat)
{
	st01();
	DADDR=dat;
 246:	e0 93 00 14 	sts	0x1400, r30
void st01(void)
{
	unsigned char busy;
	do
	{
		busy=CADDR;
 24a:	80 91 00 15 	lds	r24, 0x1500
	}
	while((busy&0x03)!=0x03);
 24e:	83 70       	andi	r24, 0x03	; 3
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	d9 f7       	brne	.-10     	; 0x24a <Show_Bmp_240x64+0x4a>
	函数调用变量：		无       
***********************************/
void Write_Command(unsigned char cmd)
{
	st01();
	CADDR=cmd;
 254:	90 93 00 15 	sts	0x1500, r25
};
void Show_Bmp_240x64(unsigned char bmpdata [])
{
	unsigned int i;
	Write_Command2( 0x00,0x00,0x42 ); //设置图形显示区域首地址GraphAddr
	for(i=0;i<1920;i++)
 258:	2f 5f       	subi	r18, 0xFF	; 255
 25a:	3f 4f       	sbci	r19, 0xFF	; 255
 25c:	87 e0       	ldi	r24, 0x07	; 7
 25e:	20 38       	cpi	r18, 0x80	; 128
 260:	38 07       	cpc	r19, r24
 262:	41 f7       	brne	.-48     	; 0x234 <Show_Bmp_240x64+0x34>
	{
		Write_Command1(bmpdata[i],0xc0);
	}
	
}
 264:	08 95       	ret

00000266 <main>:
#include "T6963C.H"
int main ()
{
	unsigned int i,a=0,c=0;
	unsigned char b=0;
	Lcd_Init();
 266:	0e 94 af 00 	call	0x15e	; 0x15e <Lcd_Init>
	Show_Bmp_240x64(bmp);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 00 01 	call	0x200	; 0x200 <Show_Bmp_240x64>
	TCCR1A=0xff;	
 272:	9f ef       	ldi	r25, 0xFF	; 255
 274:	9f bd       	out	0x2f, r25	; 47
	TCCR1B=0x0A;
 276:	8a e0       	ldi	r24, 0x0A	; 10
 278:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0X0000;
 27a:	1d bc       	out	0x2d, r1	; 45
 27c:	1c bc       	out	0x2c, r1	; 44
	TIMSK=0X00;
 27e:	17 be       	out	0x37, r1	; 55
	ETIMSK=0X00;
 280:	10 92 7d 00 	sts	0x007D, r1
	DDRB=0xff;
 284:	97 bb       	out	0x17, r25	; 23
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
			{
				b=0;
			};
		}
		OCR1A=a;
		OCR1B=0x03ff-a;
 290:	ef ef       	ldi	r30, 0xFF	; 255
 292:	f3 e0       	ldi	r31, 0x03	; 3
	TIMSK=0X00;
	ETIMSK=0X00;
	DDRB=0xff;
	while(1)
	{
		if(b==0)
 294:	66 23       	and	r22, r22
 296:	41 f4       	brne	.+16     	; 0x2a8 <main+0x42>
		{
			a=a+1;
 298:	2f 5f       	subi	r18, 0xFF	; 255
 29a:	3f 4f       	sbci	r19, 0xFF	; 255
			if(a>0x3ef)
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	20 3f       	cpi	r18, 0xF0	; 240
 2a0:	38 07       	cpc	r19, r24
 2a2:	40 f0       	brcs	.+16     	; 0x2b4 <main+0x4e>
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <main+0x4e>
				b=1;
			};
		}
		else
		{
			a=a-1;
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	30 40       	sbci	r19, 0x00	; 0
			if(a<2)
 2ac:	22 30       	cpi	r18, 0x02	; 2
 2ae:	31 05       	cpc	r19, r1
 2b0:	08 f4       	brcc	.+2      	; 0x2b4 <main+0x4e>
 2b2:	60 e0       	ldi	r22, 0x00	; 0
			{
				b=0;
			};
		}
		OCR1A=a;
 2b4:	3b bd       	out	0x2b, r19	; 43
 2b6:	2a bd       	out	0x2a, r18	; 42
		OCR1B=0x03ff-a;
 2b8:	cf 01       	movw	r24, r30
 2ba:	82 1b       	sub	r24, r18
 2bc:	93 0b       	sbc	r25, r19
 2be:	99 bd       	out	0x29, r25	; 41
 2c0:	88 bd       	out	0x28, r24	; 40
		OCR1C=OCR1C+1;
 2c2:	80 91 78 00 	lds	r24, 0x0078
 2c6:	90 91 79 00 	lds	r25, 0x0079
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	90 93 79 00 	sts	0x0079, r25
 2d0:	80 93 78 00 	sts	0x0078, r24
		c++;
 2d4:	4f 5f       	subi	r20, 0xFF	; 255
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
		OCR1C=c;
 2d8:	50 93 79 00 	sts	0x0079, r21
 2dc:	40 93 78 00 	sts	0x0078, r20
		if(c>=0x03f0)
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	40 3f       	cpi	r20, 0xF0	; 240
 2e4:	58 07       	cpc	r21, r24
 2e6:	b0 f2       	brcs	.-84     	; 0x294 <main+0x2e>
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	d3 cf       	rjmp	.-90     	; 0x294 <main+0x2e>

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>

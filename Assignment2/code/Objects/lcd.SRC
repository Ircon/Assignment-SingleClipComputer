; .\Objects\lcd.SRC generated from: lcd.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE lcd.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\lcd.lst) SRC(.\Objects\lcd.SRC)

$NOMOD51

NAME	LCD

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
T1	BIT	0B0H.5
EA	BIT	0A8H.7
LED1	BIT	0A0H.5
LED2	BIT	0A0H.6
LED3	BIT	0A0H.7
IE	DATA	0A8H
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
PS	BIT	0B8H.4
SP	DATA	081H
RS	BIT	0A0H.3
OV	BIT	0D0H.2
RW	BIT	0A0H.2
WR	BIT	0B0H.6
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
E	BIT	0A0H.4
CS1	BIT	0A0H.0
ACC	DATA	0E0H
CS2	BIT	0A0H.1
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
TF1	BIT	088H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
REN	BIT	098H.4
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?_delay_us?LCD    SEGMENT CODE 
?PR?check_busy?LCD   SEGMENT CODE 
?PR?_write_com?LCD   SEGMENT CODE 
?PR?_write_DATA_PORT?LCD                 SEGMENT CODE 
?PR?read_DATA_PORT?LCD                   SEGMENT CODE 
?PR?_select_scr?LCD  SEGMENT CODE 
?PR?_Clr_Scr?LCD     SEGMENT CODE 
?PR?_init_lcd?LCD    SEGMENT CODE 
?PR?_hz_Disp16?LCD   SEGMENT CODE 
?DT?_hz_Disp16?LCD   SEGMENT DATA OVERLAYABLE 
?PR?_sz_Disp1?LCD    SEGMENT CODE 
?DT?_sz_Disp1?LCD    SEGMENT DATA OVERLAYABLE 
?PR?_picture_disp12?LCD                  SEGMENT CODE 
?DT?_picture_disp12?LCD                  SEGMENT DATA OVERLAYABLE 
?PR?_LCD_DrawDot?LCD SEGMENT CODE 
?DT?_LCD_DrawDot?LCD SEGMENT DATA OVERLAYABLE 
?PR?dynamic_display?LCD                  SEGMENT CODE 
?PR?fixed_display?LCD                    SEGMENT CODE 
?PR?main?LCD         SEGMENT CODE 
?CO?LCD              SEGMENT CODE 
	EXTRN	CODE (wait_busy)
	EXTRN	CODE (?C?CLDPTR)
	EXTRN	CODE (?C?CLDOPTR)
	EXTRN	CODE (?C_STARTUP)
	PUBLIC	num
	PUBLIC	main
	PUBLIC	fixed_display
	PUBLIC	dynamic_display
	PUBLIC	_LCD_DrawDot
	PUBLIC	?_picture_disp12?BYTE
	PUBLIC	_picture_disp12
	PUBLIC	?_sz_Disp1?BYTE
	PUBLIC	_sz_Disp1
	PUBLIC	?_hz_Disp16?BYTE
	PUBLIC	_hz_Disp16
	PUBLIC	_init_lcd
	PUBLIC	_Clr_Scr
	PUBLIC	_select_scr
	PUBLIC	read_DATA_PORT
	PUBLIC	_write_DATA_PORT
	PUBLIC	_write_com
	PUBLIC	check_busy
	PUBLIC	_delay_us

	RSEG  ?DT?_sz_Disp1?LCD
?_sz_Disp1?BYTE:
         ss?958:   DS   1
	ORG  1
       page?959:   DS   1
	ORG  2
     column?960:   DS   1
	ORG  3
        szk?961:   DS   3
	ORG  6
          n?962:   DS   1
	ORG  7
          j?964:   DS   1
	ORG  8
          k?965:   DS   1

	RSEG  ?DT?_hz_Disp16?LCD
?_hz_Disp16?BYTE:
         ss?850:   DS   1
	ORG  1
       page?851:   DS   1
	ORG  2
     column?852:   DS   1
	ORG  3
        hzk?853:   DS   3
	ORG  6
          n?854:   DS   1
	ORG  7
          k?855:   DS   1
	ORG  8
          p?856:   DS   1
	ORG  9
          c?857:   DS   1

	RSEG  ?DT?_LCD_DrawDot?LCD
?_LCD_DrawDot?BYTE:
         x?1172:   DS   1
	ORG  1
         y?1173:   DS   1
	ORG  2
     color?1174:   DS   1
	ORG  3
       dat?1175:   DS   8
	ORG  11
      Byte?1176:   DS   8

	RSEG  ?DT?_picture_disp12?LCD
?_picture_disp12?BYTE:
        ss?1066:   DS   1
	ORG  1
      page?1067:   DS   1
	ORG  2
    column?1068:   DS   1
	ORG  3
     table?1069:   DS   3
	ORG  6
         i?1070:   DS   1
	ORG  7
         j?1071:   DS   1

	RSEG  ?CO?LCD
num:
	DB	0FFH
	DB	01FH
	DB	0EFH
	DB	0F7H
	DB	0F7H
	DB	0EFH
	DB	01FH
	DB	0FFH
	DB	0FFH
	DB	0F0H
	DB	0EFH
	DB	0DFH
	DB	0DFH
	DB	0EFH
	DB	0F0H
	DB	0FFH
	DB	0FFH
	DB	0EFH
	DB	0EFH
	DB	007H
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0DFH
	DB	0DFH
	DB	0C0H
	DB	0DFH
	DB	0DFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	08FH
	DB	0F7H
	DB	0F7H
	DB	0F7H
	DB	077H
	DB	08FH
	DB	0FFH
	DB	0FFH
	DB	0CFH
	DB	0D7H
	DB	0DBH
	DB	0DDH
	DB	0DEH
	DB	0CFH
	DB	0FFH
	DB	0FFH
	DB	0CFH
	DB	0F7H
	DB	077H
	DB	077H
	DB	0B7H
	DB	0CFH
	DB	0FFH
	DB	0FFH
	DB	0E7H
	DB	0DFH
	DB	0DFH
	DB	0DFH
	DB	0EEH
	DB	0F1H
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	03FH
	DB	0DFH
	DB	0EFH
	DB	007H
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0F8H
	DB	0FBH
	DB	0DBH
	DB	0DBH
	DB	0C0H
	DB	0DBH
	DB	0FFH
	DB	0FFH
	DB	007H
	DB	0F7H
	DB	077H
	DB	077H
	DB	0F7H
	DB	0F7H
	DB	0FFH
	DB	0FFH
	DB	0E6H
	DB	0DEH
	DB	0DFH
	DB	0DFH
	DB	0EEH
	DB	0F1H
	DB	0FFH
	DB	0FFH
	DB	01FH
	DB	0EFH
	DB	077H
	DB	077H
	DB	0E7H
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0F0H
	DB	0EEH
	DB	0DFH
	DB	0DFH
	DB	0EEH
	DB	0F1H
	DB	0FFH
	DB	0FFH
	DB	0C7H
	DB	0F7H
	DB	0F7H
	DB	037H
	DB	0C7H
	DB	0F7H
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0C0H
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	08FH
	DB	077H
	DB	0F7H
	DB	0F7H
	DB	077H
	DB	08FH
	DB	0FFH
	DB	0FFH
	DB	0E3H
	DB	0DDH
	DB	0DEH
	DB	0DEH
	DB	0DDH
	DB	0E3H
	DB	0FFH
	DB	0FFH
	DB	01FH
	DB	0EFH
	DB	0F7H
	DB	0F7H
	DB	0EFH
	DB	01FH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0CEH
	DB	0DDH
	DB	0DDH
	DB	0EEH
	DB	0F0H
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FEH
	DB	0FEH
	DB	0FEH
	DB	0FEH
	DB	0FEH
	DB	0FEH
	DB	0FEH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	03FH
	DB	03FH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	0CFH
	DB	0CFH
	DB	0FFH
	DB	0FFH
	DB	0FFH
	DB	000H
	DB	000H
	DB	010H
	DB	010H
	DB	0F8H
	DB	000H
	DB	000H
	DB	000H
	DB	000H
	DB	000H
	DB	020H
	DB	020H
	DB	03FH
	DB	020H
	DB	020H
	DB	000H
	DB	000H
	DB	070H
	DB	008H
	DB	008H
	DB	008H
	DB	008H
	DB	0F0H
	DB	000H
	DB	000H
	DB	030H
	DB	028H
	DB	024H
	DB	022H
	DB	021H
	DB	030H
	DB	000H
	DB	000H
	DB	030H
	DB	008H
	DB	008H
	DB	008H
	DB	088H
	DB	070H
	DB	000H
	DB	000H
	DB	018H
	DB	020H
	DB	021H
	DB	021H
	DB	022H
	DB	01CH
	DB	000H
	DB	000H
	DB	000H
	DB	080H
	DB	040H
	DB	030H
	DB	0F8H
	DB	000H
	DB	000H
	DB	000H
	DB	006H
	DB	005H
	DB	024H
	DB	024H
	DB	03FH
	DB	024H
	DB	024H
	DB	000H
	DB	0F8H
	DB	088H
	DB	088H
	DB	088H
	DB	008H
	DB	008H
	DB	000H
	DB	000H
	DB	019H
	DB	020H
	DB	020H
	DB	020H
	DB	011H
	DB	00EH
	DB	000H

; #include <reg51.h>
; #include "math.h"
; #define test
; 
; #define DATA_PORT (P0)
; #define OUT_PORT (P1)
; 
; #define OPEN_SHOW_WORD (0x3F)
; #define CLOSE_SHOW_WORD (0x3E)
; 
; typedef unsigned int uint;
; typedef unsigned char uchar;
; 
; sbit CS1 = P2 ^ 0;
; sbit CS2 = P2 ^ 1;
; sbit RW = P2 ^ 2;
; sbit RS = P2 ^ 3;
; sbit E = P2 ^ 4;
; 
; sbit LED1 = P2 ^ 5;
; sbit LED2 = P2 ^ 6;
; sbit LED3 = P2 ^ 7;
; //³ÌÐòÑÓÊ±£¬ÓÃÓÚLCD¶ÁÐ´Êý¾Ý,ÒÔ¼°³õÊ¼»¯
; void delay_us(uint t)							//us¼¶ÑÓÊ±³ÌÐò

	RSEG  ?PR?_delay_us?LCD
L?0078:
	USING	0
	CLR  	RW
	MOV  	P0,R5
	MOV  	R7,#02H
	MOV  	R6,#00H
	LCALL	_delay_us
L?0079:
	SETB 	E
L?0080:
	MOV  	R7,#02H
	MOV  	R6,#00H
_delay_us:
	USING	0
			; SOURCE LINE # 24
;---- Variable 't?040' assigned to Register 'R6/R7' ----
; {
			; SOURCE LINE # 25
; 	for( ;t>0;t--);								
			; SOURCE LINE # 26
?C0001:
	SETB 	C
	MOV  	A,R7
	SUBB 	A,#00H
	MOV  	A,R6
	SUBB 	A,#00H
	JC   	?C0004
	MOV  	A,R7
	DEC  	R7
	JNZ  	?C0001
	DEC  	R6
?C0072:
	SJMP 	?C0001
; }
			; SOURCE LINE # 27
?C0004:
	RET  	
; END OF _delay_us

; 
; uchar code num[][16]=		//????:??12,?x?=8x16,????,????, ??
; {
; 	0xFF,0x1F,0xEF,0xF7,0xF7,0xEF,0x1F,0xFF,0xFF,0xF0,0xEF,0xDF,0xDF,0xEF,0xF0,0xFF,//0,0
; 	0xFF,0xEF,0xEF,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xDF,0xDF,0xC0,0xDF,0xDF,0xFF,0xFF,//1,1
; 	0xFF,0x8F,0xF7,0xF7,0xF7,0x77,0x8F,0xFF,0xFF,0xCF,0xD7,0xDB,0xDD,0xDE,0xCF,0xFF,//2,2
; 	0xFF,0xCF,0xF7,0x77,0x77,0xB7,0xCF,0xFF,0xFF,0xE7,0xDF,0xDF,0xDF,0xEE,0xF1,0xFF,//3,3
; 	0xFF,0xFF,0x3F,0xDF,0xEF,0x07,0xFF,0xFF,0xFF,0xF8,0xFB,0xDB,0xDB,0xC0,0xDB,0xFF,//4,4
; 	0xFF,0x07,0xF7,0x77,0x77,0xF7,0xF7,0xFF,0xFF,0xE6,0xDE,0xDF,0xDF,0xEE,0xF1,0xFF,//5,5
; 	0xFF,0x1F,0xEF,0x77,0x77,0xE7,0xFF,0xFF,0xFF,0xF0,0xEE,0xDF,0xDF,0xEE,0xF1,0xFF,//6,6
; 	0xFF,0xC7,0xF7,0xF7,0x37,0xC7,0xF7,0xFF,0xFF,0xFF,0xFF,0xC0,0xFF,0xFF,0xFF,0xFF,//7,7
; 	0xFF,0x8F,0x77,0xF7,0xF7,0x77,0x8F,0xFF,0xFF,0xE3,0xDD,0xDE,0xDE,0xDD,0xE3,0xFF,//8,8
; 	0xFF,0x1F,0xEF,0xF7,0xF7,0xEF,0x1F,0xFF,0xFF,0xFF,0xCE,0xDD,0xDD,0xEE,0xF0,0xFF,//9,9
; 	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,//?10
; 	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,//-,11
; 	0xFF,0xFF,0xFF,0x3F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xCF,0xCF,0xFF,0xFF,0xFF,//:,12
; 	/*--  æ–‡å­—:  1  --*/
; 	/*--  å®‹ä½“12;  æ­¤å­—ä½“ä¸‹å¯¹åº”çš„ç‚¹é˜µä¸ºï¼šå®½xé«?8x16   --*/
; 	0x00,0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,//13
; 	/*--  æ–‡å­—:  2  --*/
; 	/*--  å®‹ä½“12;  æ­¤å­—ä½“ä¸‹å¯¹åº”çš„ç‚¹é˜µä¸ºï¼šå®½xé«?8x16   --*/
; 	0x00,0x70,0x08,0x08,0x08,0x08,0xF0,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//14
; 
; 	/*--  æ–‡å­—:  3  --*/
; 	/*--  å®‹ä½“12;  æ­¤å­—ä½“ä¸‹å¯¹åº”çš„ç‚¹é˜µä¸ºï¼šå®½xé«?8x16   --*/
; 	0x00,0x30,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x18,0x20,0x21,0x21,0x22,0x1C,0x00,//15
; 
; 	/*--  æ–‡å­—:  4  --*/
; 	/*--  å®‹ä½“12;  æ­¤å­—ä½“ä¸‹å¯¹åº”çš„ç‚¹é˜µä¸ºï¼šå®½xé«?8x16   --*/
; 	0x00,0x00,0x80,0x40,0x30,0xF8,0x00,0x00,0x00,0x06,0x05,0x24,0x24,0x3F,0x24,0x24,//16
; 
; 	/*--  æ–‡å­—:  5  --*/
; 	/*--  å®‹ä½“12;  æ­¤å­—ä½“ä¸‹å¯¹åº”çš„ç‚¹é˜µä¸ºï¼šå®½xé«?8x16   --*/
; 	0x00,0xF8,0x88,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x20,0x20,0x20,0x11,0x0E,0x00,//17
; };
; 
; //×´Ì¬¼ì²é£¬LCDÊÇ·ñÃ¦
; void check_busy()		

	RSEG  ?PR?check_busy?LCD
check_busy:
	USING	0
			; SOURCE LINE # 65
; {
			; SOURCE LINE # 66
; 	uchar dat;									//×´Ì¬ÐÅÏ¢£¨ÅÐ¶ÏÊÇ·ñÃ¦£©
; 	RS=0; 								//Ñ¡ÔñÖ¸Áî¼Ä´æÆ÷ 
			; SOURCE LINE # 68
	CLR  	RS
; 	RW=1; 								//Ñ¡Ôñ¶ÁÈ¡·½Ê½ 
			; SOURCE LINE # 69
	SETB 	RW
?C0007:
; 	do										//°´ÒÔÏÂ²Ù×÷
; 	{
			; SOURCE LINE # 71
; 		DATA_PORT=0x00;							//Êý¾Ý×ÜÏßÖÃ0
			; SOURCE LINE # 72
	CLR  	A
	MOV  	P0,A
; 		E=1;							//Ê¹ÄÜ¶Á³ö,×´Ì¬ÖµËÍ×ÜÏß
			; SOURCE LINE # 73
	SETB 	E
; 		delay_us(2);							//ÑÓÊ±,µÈ´ýÊý¾ÝÎÈ¶¨
			; SOURCE LINE # 74
	MOV  	R7,#02H
	MOV  	R6,A
	LCALL	_delay_us
; 		dat=DATA_PORT;							//¶ÁÈ¡×ÜÏß²¢¸³Óè±äÁ¿
			; SOURCE LINE # 75
;---- Variable 'dat?141' assigned to Register 'R7' ----
	MOV  	R7,P0
; 		E=0;							//Í£Ö¹¶ÁÈ¡
			; SOURCE LINE # 76
	CLR  	E
; 		dat=0x80 & dat; 						//½öµ±µÚ7Î»Îª0Ê±²Å¿É²Ù×÷(ÅÐ±ðbusyÐÅºÅ)
			; SOURCE LINE # 77
	ANL  	AR7,#080H
; 	}
			; SOURCE LINE # 78
; 	while(!(dat==0x00));						//Èôbusy²»Îª0,ÔòÑ­»·;Îª0Ôò½áÊø
			; SOURCE LINE # 79
	MOV  	A,R7
	JNZ  	?C0008
	SETB 	C
	SJMP 	?C0009
?C0008:
	CLR  	C
?C0009:
	JNC  	?C0007
; }
			; SOURCE LINE # 80
	RET  	
; END OF check_busy

; 
; //Ð´ÃüÁîcmdcodeµ½LCD³ÌÐò
; void write_com(uchar cmdcode)

	RSEG  ?PR?_write_com?LCD
L?0081:
	USING	0
	MOV  	A,x?1172
	ADD  	A,#040H
	MOV  	R7,A
_write_com:
	USING	0
			; SOURCE LINE # 83
;---- Variable 'cmdcode?242' assigned to Register 'R5' ----
	MOV  	R5,AR7
; {
			; SOURCE LINE # 84
; 	check_busy();								//¼ì²âLCDÊÇ·ñÃ¦
			; SOURCE LINE # 85
	LCALL	check_busy
; 	RS=0;								//Ñ¡ÔñÖ¸Áî¼Ä´æÆ÷
			; SOURCE LINE # 86
	CLR  	RS
; 	RW=0;								//Ñ¡ÔñÐ´Èë·½Ê½
			; SOURCE LINE # 87
; 	P0=cmdcode;								//Ö¸ÁîËÍ×ÜÏß
			; SOURCE LINE # 88
; 	delay_us(2);								//ÑÓÊ±,´ýÖ¸ÁîÊý¾ÝÎÈ¶¨
			; SOURCE LINE # 89
; 	E=1;								//Ê¹ÄÜÐ´Èë
			; SOURCE LINE # 90
; 	delay_us(2);								//ÑÓÊ±ÒÔÈ·±£Ð´ÈëÍêÕû
			; SOURCE LINE # 91
	LCALL	L?0078
; 	E=0;								//Í£Ö¹Ð´Èë
			; SOURCE LINE # 92
	CLR  	E
; }
			; SOURCE LINE # 93
	RET  	
; END OF _write_com

; 
; //Ð´Êý¾Ýµ½LCD³ÌÐò
; void write_DATA_PORT(uchar lcdDATA_PORT)

	RSEG  ?PR?_write_DATA_PORT?LCD
_write_DATA_PORT:
	USING	0
			; SOURCE LINE # 96
;---- Variable 'lcdDATA_PORT?343' assigned to Register 'R5' ----
	MOV  	R5,AR7
; {
			; SOURCE LINE # 97
; 	check_busy();								//¼ì²âLCDÊÇ·ñÃ¦
			; SOURCE LINE # 98
	LCALL	check_busy
; 	RS=1;								//Ñ¡ÔñÊý¾Ý¼Ä´æÆ÷
			; SOURCE LINE # 99
	SETB 	RS
; 	RW=0;								//Ñ¡ÔñÐ´Èë·½Ê½
			; SOURCE LINE # 100
; 	P0=lcdDATA_PORT;								//Êý¾ÝËÍ×ÜÏß
			; SOURCE LINE # 101
; 	delay_us(2);								//ÑÓÊ±,´ýÊý¾ÝÎÈ¶¨
			; SOURCE LINE # 102
; 	E=1;								//Ê¹ÄÜÐ´Èë
			; SOURCE LINE # 103
; 	delay_us(2);								//ÑÓÊ±,È·±£Ð´ÈëÍêÕû
			; SOURCE LINE # 104
	LCALL	L?0078
; 	E=0;								//Í£Ö¹Ð´Èë
			; SOURCE LINE # 105
	CLR  	E
; }
			; SOURCE LINE # 106
	RET  	
; END OF _write_DATA_PORT

; 
; //´ÓLCD¶ÁÊý¾Ý
; uchar read_DATA_PORT()

	RSEG  ?PR?read_DATA_PORT?LCD
read_DATA_PORT:
	USING	0
			; SOURCE LINE # 109
; {
			; SOURCE LINE # 110
; 	uchar lcdat;								//¶¨Òå¶ÁÊý±äÁ¿
; 	check_busy();								//¼ì²âLCDÊÇ·ñÃ¦
			; SOURCE LINE # 112
	LCALL	check_busy
; 	RS=1;								//Ñ¡ÔñÊý¾Ý¼Ä´æÆ÷
			; SOURCE LINE # 113
	SETB 	RS
; 	RW=1;								//Ñ¡Ôñ¶ÁÈ¡·½Ê½
			; SOURCE LINE # 114
	SETB 	RW
; 	E=0;								//×¼±¸¶Á
			; SOURCE LINE # 115
	CLR  	E
; 	E=1;								//Ê¹ÄÜÊä³ö
			; SOURCE LINE # 116
; 	delay_us(2);								//ÑÓÊ±,´ýÊý¾ÝÎÈ¶¨
			; SOURCE LINE # 117
	LCALL	L?0079
; 	lcdat=DATA_PORT;								//¶ÁÈ¡¶Ë¿ÚÖµ
			; SOURCE LINE # 118
;---- Variable 'lcdat?444' assigned to Register 'R5' ----
	MOV  	R5,P0
; 	delay_us(2);								//ÑÓÊ±,È·±£¶ÁÍêÕû
			; SOURCE LINE # 119
	LCALL	L?0080
; 	E=0;								//Í£Ö¹Y¶ÁÈ¡
			; SOURCE LINE # 120
	CLR  	E
; 	return lcdat;								//·µ»ØÊý¾ÝÖµ
			; SOURCE LINE # 121
	MOV  	R7,AR5
; }
			; SOURCE LINE # 122
	RET  	
; END OF read_DATA_PORT

; 
; //×óÓÒÆÁÑ¡Ôñ,
; void select_scr(uchar ss)

	RSEG  ?PR?_select_scr?LCD
_select_scr:
			; SOURCE LINE # 125
;---- Variable 'ss?545' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 126
; 	switch(ss)								//ÒÀ¾ÝÑ¡ÆÁ²ÎÊýÅÐ¶Ï
			; SOURCE LINE # 127
	MOV  	A,R7
	DEC  	A
	JZ   	?C0016
	DEC  	A
	JZ   	?C0017
	DEC  	A
	JZ   	?C0018
	ADD  	A,#03H
	JNZ  	?C0019
; 	{
			; SOURCE LINE # 128
; 		case 0: CS1=0;CS2=0;break;		//Ñ¡ÖÐÈ«ÆÁ²Ù×÷
			; SOURCE LINE # 129
?C0015:
	CLR  	CS1
	CLR  	CS2
	RET  	
; 		case 1: CS1=0;CS2=1;break;		//Ñ¡ÖÐ×óÆÁ²Ù×÷
			; SOURCE LINE # 130
?C0016:
	CLR  	CS1
	SETB 	CS2
	RET  	
; 		case 2: CS1=1;CS2=0;break;		//Ñ¡ÖÐÓÒÆÁ²Ù×÷
			; SOURCE LINE # 131
?C0017:
	SETB 	CS1
	CLR  	CS2
	RET  	
; 		case 3: CS1=1;CS2=1;break;		//×óÓÒÆÁÎÞ²Ù×÷
			; SOURCE LINE # 132
?C0018:
	SETB 	CS1
	SETB 	CS2
; 	}
			; SOURCE LINE # 133
; }
			; SOURCE LINE # 134
?C0019:
	RET  	
; END OF _select_scr

; 
; //Çå³ýLCDÄÚ´æ³ÌÐò,
; void Clr_Scr(uchar ss)							//ÇåÀíÆÁÄ»ÏÔÊ¾

	RSEG  ?PR?_Clr_Scr?LCD
_Clr_Scr:
	USING	0
			; SOURCE LINE # 137
;---- Variable 'ss?646' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 138
; 	uchar j,k;									//¶¨ÒåÒ³£¬ÁÐ±äÁ¿
; 	select_scr(ss);								//Ñ¡ÔñÆÁÄ»
			; SOURCE LINE # 140
	LCALL	_select_scr
;  	for(k=0;k<8;k++)							//¿ØÖÆÒ³Êý0-7£¬¹²8Ò³
			; SOURCE LINE # 141
;---- Variable 'k?648' assigned to Register 'R4' ----
	CLR  	A
	MOV  	R4,A
?C0020:
	MOV  	A,R4
	CLR  	C
	SUBB 	A,#08H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0026
;  	{
			; SOURCE LINE # 142
; 		write_com(0xb8+k);					//Ð´ÈëÒ³µØÖ·
			; SOURCE LINE # 143
	MOV  	A,R4
	ADD  	A,#0B8H
	MOV  	R7,A
	LCALL	_write_com
;   		for(j=0;j<64;j++)						//¿ØÖÆÁÐÊý0-63£¬ÁÐµØÖ·×Ô¶¯¼Ó1
			; SOURCE LINE # 144
;---- Variable 'j?647' assigned to Register 'R3' ----
	CLR  	A
	MOV  	R3,A
?C0023:
	MOV  	A,R3
	CLR  	C
	SUBB 	A,#040H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0022
; 		{
			; SOURCE LINE # 145
;       		write_com(0x40+j);				//Ð´ÈëÁÐµØÖ·
			; SOURCE LINE # 146
	MOV  	A,R3
	ADD  	A,#040H
	MOV  	R7,A
	LCALL	_write_com
; 			write_DATA_PORT(0x00);					//Ð´Èë¿Õ°×ÄÚÈÝ£¬
			; SOURCE LINE # 147
	CLR  	A
	MOV  	R7,A
	LCALL	_write_DATA_PORT
; 		}
			; SOURCE LINE # 148
	INC  	R3
	SJMP 	?C0023
; 	}
			; SOURCE LINE # 149
?C0022:
	INC  	R4
	SJMP 	?C0020
; }
			; SOURCE LINE # 150
?C0026:
	RET  	
; END OF _Clr_Scr

; 
; //³õÊ¼»¯LCD£¨²»Í¬µÄÓ¦ÓÃ£¬³õÊ¼»¯·½·¨²»Í¬£©
; void init_lcd(uchar ss)							//LCD³õÊ¼»¯³ÌÐò

	RSEG  ?PR?_init_lcd?LCD
_init_lcd:
	USING	0
			; SOURCE LINE # 153
;---- Variable 'ss?749' assigned to Register 'R5' ----
	MOV  	R5,AR7
; {
			; SOURCE LINE # 154
; 	check_busy();								//¼ì²âLCDÊÇ·ñÃ¦
			; SOURCE LINE # 155
	LCALL	check_busy
; 	select_scr(ss);								//Ñ¡ÔñÆÁÄ»
			; SOURCE LINE # 156
	MOV  	R7,AR5
	LCALL	_select_scr
; 	Clr_Scr(ss);								//LCDÇåÆÁÄ»ÏÔÊ¾
			; SOURCE LINE # 157
	LCALL	_Clr_Scr
; 	write_com(0x3e);			  				//¹ØÏÔÊ¾
			; SOURCE LINE # 158
	MOV  	R7,#03EH
	LCALL	_write_com
; 	write_com(0xb8+0);				  		//ÉèÖÃ:ÆðÊ¼Ò³µØÖ·
			; SOURCE LINE # 159
	MOV  	R7,#0B8H
	LCALL	_write_com
; 	write_com(0xc0+0);			  			//ÉèÖÃ:ÆðÊ¼ÐÐµØÖ·
			; SOURCE LINE # 160
	MOV  	R7,#0C0H
	LCALL	_write_com
; 	write_com(0x40+0);			  			//ÉèÖÃ:ÆðÊ¼ÁÐµØÖ·
			; SOURCE LINE # 161
	MOV  	R7,#040H
	LCALL	_write_com
; 	write_com(0x3f);				  			//¿ªÏÔÊ¾
			; SOURCE LINE # 162
	MOV  	R7,#03FH
	LJMP 	_write_com
; END OF _init_lcd

; }
; 
; //ÏÔÊ¾²Ù×÷£º
; 
; //Ö¸¶¨µØÖ·°´ÐÐÏÔÊ¾±àÂëÊý×éhzk[][32]ÖÐÁ¬ÐøµÄ1~4¸öºº×Ö(16*16)										
; //²ÎÊý:	ss=0~2; page=0~7; col=0~63; hzk¡ª¡ªhzk[][32]; n=1~4
; void hz_Disp16(uchar ss,uchar page,uchar column,uchar hzk[][32],uchar n)	

	RSEG  ?PR?_hz_Disp16?LCD
_hz_Disp16:
	USING	0
			; SOURCE LINE # 169
	MOV  	page?851,R5
	MOV  	column?852,R3
;---- Variable 'ss?850' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 170
; 	uchar k,p,c;								//±äÁ¿:ºº×ÖÊý,Ò³,ÁÐ
; 	select_scr(ss);								//Ñ¡ÔñÆÁÄ»
			; SOURCE LINE # 172
	LCALL	_select_scr
; 	for(k=0;k<n;k++)							//°´ºº×Ö¸öÊýÑ­»·Ð´Èë
			; SOURCE LINE # 173
	CLR  	A
	MOV  	k?855,A
?C0028:
	MOV  	A,k?855
	CLR  	C
	SUBB 	A,n?854
	JNC  	?C0037
; 	{
			; SOURCE LINE # 174
; 		for(p=0;p<2;p++)						//Ã¿¸ö×Ö·ûÕ¼ 2 Ò³,ËùÒÔÐ´2´Î
			; SOURCE LINE # 175
	CLR  	A
	MOV  	p?856,A
?C0031:
	CLR  	C
	MOV  	A,p?856
	SUBB 	A,#02H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0030
; 		{
			; SOURCE LINE # 176
; 			write_com(0xb8+page+p);		   	//Ð´ÈëÏÔÊ¾Ò³µØÖ·(page,page+1)
			; SOURCE LINE # 177
	MOV  	A,page?851
	ADD  	A,#0B8H
	ADD  	A,p?856
	MOV  	R7,A
	LCALL	_write_com
; 			write_com(0x40+column+16*k);		//Ð´ÈëÏÔÊ¾ÁÐµØÖ·(ÆðÊ¼ÁÐ,0~16~32~48)
			; SOURCE LINE # 178
	MOV  	A,column?852
	ADD  	A,#040H
	MOV  	R7,A
	MOV  	A,k?855
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,R7
	MOV  	R7,A
	LCALL	_write_com
; 			for(c=0;c<16;c++)					//Á¬Ðø16´Î(ÉÏ,ÏÂ°ë×Ö¸÷16¸ö±àÂë)
			; SOURCE LINE # 179
	CLR  	A
	MOV  	c?857,A
?C0034:
	CLR  	C
	MOV  	A,c?857
	SUBB 	A,#010H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0033
; 			write_DATA_PORT(hzk[k][16*p+c]);			//Ã¿Ò³Ð´Èë16¸ö×Ö½ÚµÄºº×Ö±àÂëÊý¾Ý
			; SOURCE LINE # 180
	MOV  	A,k?855
	MOV  	B,#020H
	MUL  	AB
	MOV  	R3,hzk?853
	ADD  	A,hzk?853+02H
	MOV  	R1,A
	MOV  	A,hzk?853+01H
	ADDC 	A,B
	MOV  	R2,A
	MOV  	A,p?856
	MOV  	B,#010H
	MUL  	AB
	MOV  	R4,#00H
	ADD  	A,c?857
	MOV  	R7,A
	MOV  	A,R4
	ADDC 	A,B
	MOV  	R6,A
	MOV  	A,R1
	ADD  	A,R7
	MOV  	R1,A
	MOV  	A,R2
	ADDC 	A,R6
	MOV  	R2,A
	LCALL	?C?CLDPTR
	MOV  	R7,A
	LCALL	_write_DATA_PORT
	INC  	c?857
	SJMP 	?C0034
; 		}
			; SOURCE LINE # 181
?C0033:
	INC  	p?856
	SJMP 	?C0031
; 	}
			; SOURCE LINE # 182
?C0030:
	INC  	k?855
	SJMP 	?C0028
; }
			; SOURCE LINE # 183
?C0037:
	RET  	
; END OF _hz_Disp16

; 
; //ÖØ¸´ÏÔÊ¾¶þÎ¬Êý×észk[][16]ÖÐÏàÍ¬×Ö·û1~8´Î
; void sz_Disp1(uchar ss,uchar page,uchar column,uchar szk[][16],uchar n)

	RSEG  ?PR?_sz_Disp1?LCD
_sz_Disp1:
	USING	0
			; SOURCE LINE # 186
	MOV  	page?959,R5
	MOV  	column?960,R3
;---- Variable 'ss?958' assigned to Register 'R7' ----
; {											//²ÎÊý: ÆÁ,Ò³¡¢ÁÐ¡¢Âë¡¢×Ö·ûÊý
			; SOURCE LINE # 187
; 	uchar i=0,j=0,k=0;				   			//±äÁ¿: Ò³,ÁÐ,×Ö·ûÊý
			; SOURCE LINE # 188
;---- Variable 'i?963' assigned to Register 'R4' ----
	CLR  	A
	MOV  	R4,A
	MOV  	j?964,A
	MOV  	k?965,A
; 	select_scr(ss);								//Ñ¡ÔñÆÁÄ»
			; SOURCE LINE # 189
	LCALL	_select_scr
; 	for(k=0;k<n;k++)
			; SOURCE LINE # 190
	CLR  	A
	MOV  	k?965,A
?C0038:
	MOV  	A,k?965
	CLR  	C
	SUBB 	A,n?962
	JNC  	?C0047
; 	{
			; SOURCE LINE # 191
; 		for(i=0;i<2;i++)					   	//Ã¿¸ö×Ö·ûÕ¼ 2 Ò³,ËùÒÔÐ´2´Î
			; SOURCE LINE # 192
	CLR  	A
	MOV  	R4,A
?C0041:
	MOV  	A,R4
	CLR  	C
	SUBB 	A,#02H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0040
; 		{
			; SOURCE LINE # 193
; 			write_com(0xb8+page+i);		   	//Ð´ÈëÏÔÊ¾Ò³µØÖ·(pag,pag+1)
			; SOURCE LINE # 194
	MOV  	A,page?959
	ADD  	A,#0B8H
	ADD  	A,R4
	MOV  	R7,A
	LCALL	_write_com
; 			write_com(0x40+column+8*k);		//Ð´ÈëÏÔÊ¾ÁÐµØÖ·(ÆðÊ¼ÁÐ)
			; SOURCE LINE # 195
	MOV  	A,column?960
	ADD  	A,#040H
	MOV  	R7,A
	MOV  	A,k?965
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,R7
	MOV  	R7,A
	LCALL	_write_com
; 			for(j=0;j<8;j++) 				   	//Á¬Ðø8´Î
			; SOURCE LINE # 196
	CLR  	A
	MOV  	j?964,A
?C0044:
	CLR  	C
	MOV  	A,j?964
	SUBB 	A,#08H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0043
; 			write_DATA_PORT(szk[0][8*i+j]);			//Ð´Èë8¸ö×Ö½ÚÊý¾Ý
			; SOURCE LINE # 197
	MOV  	R3,szk?961
	MOV  	R2,szk?961+01H
	MOV  	R1,szk?961+02H
	MOV  	B,#08H
	MOV  	A,R4
	MUL  	AB
	ADD  	A,j?964
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,B
	MOV  	DPH,A
	LCALL	?C?CLDOPTR
	MOV  	R7,A
	LCALL	_write_DATA_PORT
	INC  	j?964
	SJMP 	?C0044
; 		}
			; SOURCE LINE # 198
?C0043:
	INC  	R4
	SJMP 	?C0041
; 	}
			; SOURCE LINE # 199
?C0040:
	INC  	k?965
	SJMP 	?C0038
; }
			; SOURCE LINE # 200
?C0047:
	RET  	
; END OF _sz_Disp1

; 
; //°ëÆÁÍ¼ÏñÏÔÊ¾º¯Êý£¨´ø²ÎÊý£ºÆÁ,Ò³,ÁÐ,Êý¾Ý£©
; void picture_disp12(uchar ss,uchar page,uchar column,uchar table[8][64])

	RSEG  ?PR?_picture_disp12?LCD
_picture_disp12:
	USING	0
			; SOURCE LINE # 203
	MOV  	page?1067,R5
	MOV  	column?1068,R3
;---- Variable 'ss?1066' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 204
; 	uchar i,j;									//Ò³,ÁÐ±äÁ¿
; 	select_scr(ss);								//Ñ¡ÔñÆÁ
			; SOURCE LINE # 206
	LCALL	_select_scr
;   	if(column>=64)							//Èç¹ûÁÐµØÖ·´óÓÚµÈÓÚ64
			; SOURCE LINE # 207
	CLR  	C
	MOV  	A,column?1068
	SUBB 	A,#040H
	MOV  	A,#080H
	SUBB 	A,#080H
	JC   	?C0048
; 	column=column-64; 						//ÁÐÊ×µØÖ·ÈÔ´Ó0x40¿ªÊ¼ÏÔÊ¾
			; SOURCE LINE # 208
	MOV  	A,#0C0H
	ADD  	A,column?1068
	MOV  	column?1068,A
?C0048:
;     for(i=0;i<8;i++)							//·Ö8Ò³Ð´Èë
			; SOURCE LINE # 209
	CLR  	A
	MOV  	i?1070,A
?C0049:
	CLR  	C
	MOV  	A,i?1070
	SUBB 	A,#08H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0055
;     {  
			; SOURCE LINE # 210
; 		write_com(0xb8+page+i);				//Ð´Ò³µØÖ·
			; SOURCE LINE # 211
	MOV  	A,page?1067
	ADD  	A,#0B8H
	ADD  	A,i?1070
	MOV  	R7,A
	LCALL	_write_com
;         write_com(0x40+column);				//Ð´ÁÐµØÖ·
			; SOURCE LINE # 212
	MOV  	A,column?1068
	ADD  	A,#040H
	MOV  	R7,A
	LCALL	_write_com
;       	for(j=0;j<64;j++)						//ÒÀ´ÎÐ´Èë0~63ÁÐ
			; SOURCE LINE # 213
	CLR  	A
	MOV  	j?1071,A
?C0052:
	CLR  	C
	MOV  	A,j?1071
	SUBB 	A,#040H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0051
;         {
			; SOURCE LINE # 214
;            write_DATA_PORT(table[i][j]);				//Ð´Í¼ÏñÊý¾Ý
			; SOURCE LINE # 215
	MOV  	A,i?1070
	MOV  	B,#040H
	MUL  	AB
	MOV  	R3,table?1069
	ADD  	A,table?1069+02H
	MOV  	R1,A
	MOV  	A,table?1069+01H
	ADDC 	A,B
	MOV  	R2,A
	MOV  	R6,#00H
	MOV  	A,R1
	ADD  	A,j?1071
	MOV  	R1,A
	MOV  	A,R6
	ADDC 	A,R2
	MOV  	R2,A
	LCALL	?C?CLDPTR
	MOV  	R7,A
	LCALL	_write_DATA_PORT
;         }
			; SOURCE LINE # 216
	INC  	j?1071
	SJMP 	?C0052
;     }
			; SOURCE LINE # 217
?C0051:
	INC  	i?1070
	SJMP 	?C0049
; }
			; SOURCE LINE # 218
?C0055:
	RET  	
; END OF _picture_disp12

; 
; //»æÍ¼²Ù×÷£º
; 
; //·´°×¹¦ÄÜ´òµãº¯Êý,ÈÎÒâÖ¸¶¨×ø±ê»­µã	color=1£¬ºÚ£»color=0£¬°×
; void LCD_DrawDot(uchar x,uchar y,uchar color)//xË®Æ½×ø±ê£¬y´¹Ö±×ø±ê£¬colorÏÔÊ¾ÑÕÉ« 

	RSEG  ?PR?_LCD_DrawDot?LCD
_LCD_DrawDot:
	USING	0
			; SOURCE LINE # 223
	MOV  	x?1172,R7
	MOV  	y?1173,R5
	MOV  	color?1174,R3
; {	
			; SOURCE LINE # 224
; 	char dat[8],Byte[8];  						//¶¨ÒåÁÐ×Ö½ÚÊý×é
; 	uchar j;  								//Ñ­»·±äÁ¿
;  	for(j=0;j<8;j++) dat[j]=0x00;     			//Êý×éÔªËØ¸³³õÖµ 0x00
			; SOURCE LINE # 227
;---- Variable 'j?1177' assigned to Register 'R4' ----
	CLR  	A
	MOV  	R4,A
?C0056:
	MOV  	A,R4
	CLR  	C
	SUBB 	A,#08H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0057
	MOV  	A,#LOW (dat?1175)
	ADD  	A,R4
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
	INC  	R4
	SJMP 	?C0056
?C0057:
; 
; 	if(x<64)									//ÁÐ×ø±êÐ¡ÓÚ64
			; SOURCE LINE # 229
	CLR  	C
	MOV  	A,x?1172
	SUBB 	A,#040H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0059
; 	select_scr(1);								//Ñ¡Ôñ×ó°ëÆÁ  
			; SOURCE LINE # 230
	MOV  	R7,#01H
	LCALL	_select_scr
	SJMP 	?C0060
?C0059:
; 	else  									//ÁÐ×ø±ê´óÓÚµÈÓÚ64
; 	{select_scr(2);x-=64;}						//Ñ¡ÔñÓÒ°ëÆÁ,ÁÐ×ø±êµ÷ÕûÎª0~63
			; SOURCE LINE # 232
	MOV  	R7,#02H
	LCALL	_select_scr
	MOV  	A,#0C0H
	ADD  	A,x?1172
	MOV  	x?1172,A
?C0060:
; 	for(j=1;j<7;j++)  							//Ã¿ÆÁ8Ò³(0~7),8¸ö×Ö½Ú
			; SOURCE LINE # 233
	MOV  	R4,#01H
?C0061:
	MOV  	A,R4
	CLR  	C
	SUBB 	A,#07H
	MOV  	A,#080H
	SUBB 	A,#080H
	JC   	$ + 5H
	LJMP 	?C0066
; 	{
			; SOURCE LINE # 234
; 		write_com(0xb8+j);    				//Ð´Ò³µØÖ·
			; SOURCE LINE # 235
	MOV  	A,R4
	ADD  	A,#0B8H
	MOV  	R7,A
	LCALL	_write_com
; 		write_com(0x40+x);    				//Ð´ÁÐµØÖ·
			; SOURCE LINE # 236
	LCALL	L?0081
; 		read_DATA_PORT();							//¿Õ¶ÁÒ»´Î
			; SOURCE LINE # 237
	LCALL	read_DATA_PORT
; 		Byte[j]=read_DATA_PORT();					//¶Á³öÒ»×Ö½ÚÊý¾Ý
			; SOURCE LINE # 238
	LCALL	read_DATA_PORT
	MOV  	A,#LOW (Byte?1176)
	ADD  	A,R4
	MOV  	R0,A
	MOV  	@R0,AR7
; 	 
; 		if(color)								//Èç¹ûÒªÏÔÊ¾µã
			; SOURCE LINE # 240
	MOV  	A,color?1174
	JZ   	?C0064
; 		{
			; SOURCE LINE # 241
; 			dat[y>>3]|=0x01<<(y&0x07);		//yÖµËùÔÚÒ³¶ÔÓ¦×Ö½ÚÎ»ÖÃ 1
			; SOURCE LINE # 242
	MOV  	A,y?1173
	RRC  	A
	RRC  	A
	RRC  	A
	ANL  	A,#01FH
	ADD  	A,#LOW (dat?1175)
	MOV  	R0,A
	PUSH 	AR0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	A,y?1173
	ANL  	A,#07H
	MOV  	R6,A
	MOV  	R0,A
	MOV  	A,#01H
	INC  	R0
	SJMP 	?C0074
?C0073:
	CLR  	C
	RLC  	A
?C0074:
	DJNZ 	R0,?C0073
	ORL  	A,R7
	POP  	AR0
	MOV  	@R0,A
; 			Byte[j]|=dat[j];					//ÐÞÕýÔ­¶ÁÊý("»ò"ÔËËã)
			; SOURCE LINE # 243
	MOV  	A,#LOW (Byte?1176)
	ADD  	A,R4
	MOV  	R0,A
	PUSH 	AR0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	A,#LOW (dat?1175)
	ADD  	A,R4
	MOV  	R0,A
	MOV  	A,@R0
	ORL  	A,R7
; 		}					
			; SOURCE LINE # 244
	SJMP 	?C0077
?C0064:
; 		else 								//Èç¹ûÒª²Á³ýµã
; 		{
			; SOURCE LINE # 246
; 			dat[y>>3]&=~(0x01<<(y&0x07));		//yÖµËùÔÚÒ³¶ÔÓ¦×Ö½ÚÎ»ÖÃ 0
			; SOURCE LINE # 247
	MOV  	A,y?1173
	RRC  	A
	RRC  	A
	RRC  	A
	ANL  	A,#01FH
	ADD  	A,#LOW (dat?1175)
	MOV  	R0,A
	PUSH 	AR0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	A,y?1173
	ANL  	A,#07H
	MOV  	R6,A
	MOV  	R0,A
	MOV  	A,#01H
	INC  	R0
	SJMP 	?C0076
?C0075:
	CLR  	C
	RLC  	A
?C0076:
	DJNZ 	R0,?C0075
	CPL  	A
	ANL  	A,R7
	POP  	AR0
	MOV  	@R0,A
; 			Byte[j]&=dat[j];					//ÐÞÕýÔ­¶ÁÊý("Óë"ÔËËã)
			; SOURCE LINE # 248
	MOV  	A,#LOW (Byte?1176)
	ADD  	A,R4
	MOV  	R0,A
	PUSH 	AR0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	A,#LOW (dat?1175)
	ADD  	A,R4
	MOV  	R0,A
	MOV  	A,@R0
	ANL  	A,R7
?C0077:
	POP  	AR0
	MOV  	@R0,A
; 		}
			; SOURCE LINE # 249
?C0065:
; 		write_com(0x40+x);    				//ÖØÐ´ÁÐµØÖ·(Òò¶ÁÊý¶ø¸Ä±ä)
			; SOURCE LINE # 250
	LCALL	L?0081
; 		write_DATA_PORT(Byte[j]); 					//Ð´ÈëÐÞÕýºóµÄ×Ö½ÚÊý¾Ý
			; SOURCE LINE # 251
	MOV  	A,#LOW (Byte?1176)
	ADD  	A,R4
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R7,A
	LCALL	_write_DATA_PORT
; 	}
			; SOURCE LINE # 252
	INC  	R4
	LJMP 	?C0061
; }
			; SOURCE LINE # 253
?C0066:
	RET  	
; END OF _LCD_DrawDot

; 
; 
; void dynamic_display()							//¶¯Ì¬ÏÔÊ¾£¨ËæÊ±¸üÐÂµÄÊýÖµ£©

	RSEG  ?PR?dynamic_display?LCD
dynamic_display:
	USING	0
			; SOURCE LINE # 256
; {
			; SOURCE LINE # 257
; 	sz_Disp1(2,0, 0,num[1],1);			//ÓÒÆÁ0Ò³µÚ 0ÁÐÏÔÊ¾'ÄêÊ®Î»'
			; SOURCE LINE # 258
	MOV  	?_sz_Disp1?BYTE+03H,#0FFH
	MOV  	?_sz_Disp1?BYTE+04H,#HIGH (num+010H)
	MOV  	?_sz_Disp1?BYTE+05H,#LOW (num+010H)
	MOV  	?_sz_Disp1?BYTE+06H,#01H
	CLR  	A
	MOV  	R3,A
	MOV  	R5,A
	MOV  	R7,#02H
	LJMP 	_sz_Disp1
; END OF dynamic_display

; 	//sz_Disp1(2,0, 8,num[2],1);			//ÓÒÆÁ0Ò³µÚ 8ÁÐÏÔÊ¾'Äê¸öÎ»'
; 	//sz_Disp1(2,0,24,num[3],1);			//ÓÒÆÁ0Ò³µÚ24ÁÐÏÔÊ¾'ÔÂÊ®Î»'
; 	//sz_Disp1(2,0,32,num[4],1);			//ÓÒÆÁ0Ò³µÚ32ÁÐÏÔÊ¾'ÔÂ¸öÎ»'
; 	//sz_Disp1(2,0,48,num[5],1);			//ÓÒÆÁ0Ò³µÚ48ÁÐÏÔÊ¾'ÈÕÊ®Î»'
; 	//sz_Disp1(2,0,56,num[6],1);			//ÓÒÆÁ0Ò³µÚ56ÁÐÏÔÊ¾'ÈÕ¸öÎ»'
; 	/*				
; 	sz_Disp1(2,4, 0,num[7],1);			//ÓÒÆÁ4Ò³µÚ 0ÁÐÏÔÊ¾'Ê±Ê®Î»'
; 	sz_Disp1(2,4, 8,num[8],1);			//ÓÒÆÁ4Ò³µÚ 8ÁÐÏÔÊ¾'Ê±¸öÎ»'
; 	sz_Disp1(2,4,24,num[9],1);			//ÓÒÆÁ4Ò³µÚ24ÁÐÏÔÊ¾'·ÖÊ®Î»'
; 	sz_Disp1(2,4,32,num[1],1);			//ÓÒÆÁ4Ò³µÚ32ÁÐÏÔÊ¾'·Ö¸öÎ»'
; 	sz_Disp1(2,4,48,num[2],1);			//ÓÒÆÁ4Ò³µÚ48ÁÐÏÔÊ¾'ÃëÊ®Î»'
; 	sz_Disp1(2,4,56,num[3],1);			//ÓÒÆÁ4Ò³µÚ56ÁÐÏÔÊ¾'Ãë¸öÎ»'
; 	*/
; }
; void fixed_display() 							//¹Ì¶¨ÏÔÊ¾(°´ÏÔÊ¾ÆÁÄ»¡¢Ò³,ÁÐ,×ÖÂë,×ÖÊý¶¨Î»)

	RSEG  ?PR?fixed_display?LCD
fixed_display:
	USING	0
			; SOURCE LINE # 273
; {
			; SOURCE LINE # 274
; 	sz_Disp1(1,0,16,num[11],1);					//×óÆÁ0Ò³µÚ16ÁÐÏÔÊ¾'-'
			; SOURCE LINE # 275
	MOV  	?_sz_Disp1?BYTE+03H,#0FFH
	MOV  	?_sz_Disp1?BYTE+04H,#HIGH (num+0B0H)
	MOV  	?_sz_Disp1?BYTE+05H,#LOW (num+0B0H)
	MOV  	?_sz_Disp1?BYTE+06H,#01H
	MOV  	R3,#010H
	CLR  	A
	MOV  	R5,A
	MOV  	R7,#01H
	LCALL	_sz_Disp1
; 	sz_Disp1(1,0,40,num[11],1);					//×óÆÁ0Ò³µÚ40ÁÐÏÔÊ¾'-'
			; SOURCE LINE # 276
	MOV  	?_sz_Disp1?BYTE+03H,#0FFH
	MOV  	?_sz_Disp1?BYTE+04H,#HIGH (num+0B0H)
	MOV  	?_sz_Disp1?BYTE+05H,#LOW (num+0B0H)
	MOV  	?_sz_Disp1?BYTE+06H,#01H
	MOV  	R3,#028H
	CLR  	A
	MOV  	R5,A
	MOV  	R7,#01H
	LCALL	_sz_Disp1
; 	//hz_Disp16(1,2,0,HZ[8],2);					//×óÆÁ2Ò³µÚ0ÁÐÏÔÊ¾"ÐÇÆÚ"
; 	sz_Disp1(1,2,32,num[10],2);					//×óÆÁ2Ò³µÚ32ÁÐÌî³äºÚ¿é"¡ö" 2¸ö
			; SOURCE LINE # 278
	MOV  	?_sz_Disp1?BYTE+03H,#0FFH
	MOV  	?_sz_Disp1?BYTE+04H,#HIGH (num+0A0H)
	MOV  	?_sz_Disp1?BYTE+05H,#LOW (num+0A0H)
	MOV  	?_sz_Disp1?BYTE+06H,#02H
	MOV  	R3,#020H
	MOV  	R5,#02H
	MOV  	R7,#01H
	LCALL	_sz_Disp1
; 	sz_Disp1(1,4,16,num[12],1);					//×óÆÁ4Ò³µÚ16ÁÐÏÔÊ¾':'
			; SOURCE LINE # 279
	MOV  	?_sz_Disp1?BYTE+03H,#0FFH
	MOV  	?_sz_Disp1?BYTE+04H,#HIGH (num+0C0H)
	MOV  	?_sz_Disp1?BYTE+05H,#LOW (num+0C0H)
	MOV  	?_sz_Disp1?BYTE+06H,#01H
	MOV  	R3,#010H
	MOV  	R5,#04H
	MOV  	R7,#01H
	LCALL	_sz_Disp1
; 	sz_Disp1(1,4,40,num[12],1);					//×óÆÁ4Ò³µÚ40ÁÐÏÔÊ¾':'
			; SOURCE LINE # 280
	MOV  	?_sz_Disp1?BYTE+03H,#0FFH
	MOV  	?_sz_Disp1?BYTE+04H,#HIGH (num+0C0H)
	MOV  	?_sz_Disp1?BYTE+05H,#LOW (num+0C0H)
	MOV  	?_sz_Disp1?BYTE+06H,#01H
	MOV  	R3,#028H
	MOV  	R5,#04H
	MOV  	R7,#01H
	LCALL	_sz_Disp1
; 	//hz_Disp16(1,6,0,HZ[10],2);					//×óÆÁ6Ò³µÚ0ÁÐÏÔÊ¾"ÆøÎÂ"
; 	//hz_Disp16(1,6,48,HZ[0],1);					//×óÆÁ6Ò³µÚ48ÁÐÏÔÊ¾"¡æ"
; 	
; 	//hz_Disp16(2,0,0,HZ[18],4);					//×óÆÁµÚÒ»ÐÐÊ±¼äÌáÐÑ
; 	//hz_Disp16(2,0,0,HZ[20],2);					//ÌáÐÑ1
; 	sz_Disp1(2,0,34,num[13],1);
			; SOURCE LINE # 286
	MOV  	?_sz_Disp1?BYTE+03H,#0FFH
	MOV  	?_sz_Disp1?BYTE+04H,#HIGH (num+0D0H)
	MOV  	?_sz_Disp1?BYTE+05H,#LOW (num+0D0H)
	MOV  	?_sz_Disp1?BYTE+06H,#01H
	MOV  	R3,#022H
	CLR  	A
	MOV  	R5,A
	MOV  	R7,#02H
	LCALL	_sz_Disp1
; 	//hz_Disp16(2,2,0,HZ[20],2);					//ÌáÐÑ2
; 	sz_Disp1(2,2,34,num[14],1);
			; SOURCE LINE # 288
	MOV  	?_sz_Disp1?BYTE+03H,#0FFH
	MOV  	?_sz_Disp1?BYTE+04H,#HIGH (num+0E0H)
	MOV  	?_sz_Disp1?BYTE+05H,#LOW (num+0E0H)
	MOV  	?_sz_Disp1?BYTE+06H,#01H
	MOV  	R3,#022H
	MOV  	R5,#02H
	MOV  	R7,#02H
	LCALL	_sz_Disp1
; 	//hz_Disp16(2,4,0,HZ[20],2);					//ÌáÐÑ3
; 	sz_Disp1(2,4,34,num[15],1);
			; SOURCE LINE # 290
	MOV  	?_sz_Disp1?BYTE+03H,#0FFH
	MOV  	?_sz_Disp1?BYTE+04H,#HIGH (num+0F0H)
	MOV  	?_sz_Disp1?BYTE+05H,#LOW (num+0F0H)
	MOV  	?_sz_Disp1?BYTE+06H,#01H
	MOV  	R3,#022H
	MOV  	R5,#04H
	MOV  	R7,#02H
	LJMP 	_sz_Disp1
; END OF fixed_display

; }
; void main(void){

	RSEG  ?PR?main?LCD
main:
	USING	0
			; SOURCE LINE # 292
; 	init_lcd(0);
			; SOURCE LINE # 293
	CLR  	A
	MOV  	R7,A
	LCALL	_init_lcd
; 	wait_busy();
			; SOURCE LINE # 294
	LCALL	wait_busy
?C0069:
; 		//dynamic_display();
; 		
; 	while(1){		
			; SOURCE LINE # 297
; 		fixed_display();
			; SOURCE LINE # 298
	LCALL	fixed_display
; 	}
			; SOURCE LINE # 299
	SJMP 	?C0069
; END OF main

	END

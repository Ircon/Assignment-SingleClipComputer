C51 COMPILER V9.60.0.0   MAIN                                                              12/25/2019 15:12:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <LANG.h>
   2          #include <LCD12864.h>
   3          #include <DS1302.h>
   4          #include <FONT.h>
   5          sbit UP = P0 ^ 0;
   6          sbit DOWN = P0 ^ 1;
   7          sbit LEFT = P0 ^ 2;
   8          sbit RIGHT = P0 ^ 3;
   9          sbit LED = P2 ^ 0;
  10          
  11          uchar time_data[7];
  12          void init_fun(){
  13   1              LCD_Init();
  14   1      }
  15          // 日 期 年*2 月*2 日*2
  16          uchar code tim_loc_x[] = {
  17                  0,0,0,0,0,0,0,0,
  18                  
  19                  16,16,16,16,16,16,16,16,
  20                  
  21                  32,32
  22          };
  23          uchar code tim_loc_y[] = {
  24                  0,1,2,3,4,5,6,7,
  25                  
  26                  0,1,2,3,4,5,6,7,
  27                  
  28                  0,1
  29          };
  30          uchar load_time[] = {10,20,40};
  31          uchar* tim_font_arr[] = {
  32                  HanZi_32[2],HanZi_32[3],0,0,0,0,0,0,
  33                  
  34                  HanZi_32[7],HanZi_32[8],0,0,0,0,0,0,
  35                  
  36                  HanZi_32[0],HanZi_32[1]
  37          };
  38          
  39          uchar code tim_loc_xl[] = {
  40                  0,0,0,0,0,0,0,0
  41          };
  42          uchar code tim_loc_yl[] = {
  43                  0,1,2,3,4,5,6,7
  44          };
  45          
  46          uchar* tim_font_arrl[] = {
  47                  HanZi_32[2],HanZi_32[3],0,0,0,0,0,0
  48          };
  49          uchar set_pos = 0;
  50          uchar code mod_num[] = {24,60,60};
  51          void display_all(){
  52   1              //display_font16(0,0,HanZi_32[2])
  53   1              uchar i;
  54   1              for(i = 0 ; i < sizeof(tim_loc_x) / sizeof(uchar); ++i){
C51 COMPILER V9.60.0.0   MAIN                                                              12/25/2019 15:12:22 PAGE 2   

  55   2                      display_font16(tim_loc_x[i],tim_loc_y[i],tim_font_arr[i]);
  56   2              }
  57   1              
  58   1              for(i = 0 ; i < sizeof(tim_loc_xl) / sizeof(uchar); ++i){
  59   2                      display_font16_l(tim_loc_xl[i],tim_loc_yl[i],tim_font_arrl[i]);
  60   2              }
  61   1              for(i = 0; i < 3 ; ++i){
  62   2                      if(i == set_pos){
  63   3                              display_font16_l(16,i*2 + 2,HanZi_32[9]);
  64   3                              display_font16_l(16,i*2 + 3,HanZi_32[9]);
  65   3                      }else{
  66   3                              display_font16_l(16,i*2 + 2,HanZi_32[8]);
  67   3                              display_font16_l(16,i*2 + 3,HanZi_32[8]);
  68   3                      }
  69   2              }
  70   1              
  71   1      }
  72          void updat_time(){
  73   1              tim_font_arr[2] = num_32[time_data[0]/10%10];
  74   1              tim_font_arr[3] = num_32[time_data[0]%10];
  75   1              tim_font_arr[4] = num_32[time_data[2]/10%10];
  76   1              tim_font_arr[5] = num_32[time_data[2]%10];
  77   1              tim_font_arr[6] = num_32[time_data[3]/10%10];
  78   1              tim_font_arr[7] = num_32[time_data[3]%10];
  79   1              
  80   1              tim_font_arr[10] = num_32[time_data[4]/10%10];
  81   1              tim_font_arr[11] = num_32[time_data[4]%10];
  82   1              tim_font_arr[12] = num_32[time_data[5]/10%10];
  83   1              tim_font_arr[13] = num_32[time_data[5]%10];
  84   1              tim_font_arr[14] = num_32[time_data[6]/10%10];
  85   1              tim_font_arr[15] = num_32[time_data[6]%10];
  86   1              
  87   1              tim_font_arrl[2] = num_32[load_time[0]/10%10];
  88   1              tim_font_arrl[3] = num_32[load_time[0]%10];
  89   1              tim_font_arrl[4] = num_32[load_time[1]/10%10];
  90   1              tim_font_arrl[5] = num_32[load_time[1]%10];
  91   1              tim_font_arrl[6] = num_32[load_time[2]/10%10];
  92   1              tim_font_arrl[7] = num_32[load_time[2]%10];
  93   1      }
  94          void scan_key(){
  95   1              if(UP == 0 || DOWN == 0 || LEFT == 0 || RIGHT == 0){
  96   2                      dely_US(50);
  97   2                      if(UP == 0){
  98   3                              load_time[set_pos] = (load_time[set_pos] + 1) % mod_num[set_pos];
  99   3                      }else if(DOWN == 0){
 100   3                              load_time[set_pos] = (load_time[set_pos] + mod_num[set_pos] - 1) % mod_num[set_pos];
 101   3                      }else if(LEFT == 0){
 102   3                              set_pos = (set_pos + 2) % 3;
 103   3                      }else if(RIGHT == 0){
 104   3                              set_pos = (set_pos + 1) % 3;
 105   3                      }
 106   2                      
 107   2              }
 108   1      }
 109          void main(void){
 110   1              uchar buf,add = 0;
 111   1              init_fun();
 112   1      //      test_disply3();
 113   1              while(1){
 114   2                      //read_time(time_data);
 115   2                      add++;
 116   2                      if(add == 10)time_data[6]++;
C51 COMPILER V9.60.0.0   MAIN                                                              12/25/2019 15:12:22 PAGE 3   

 117   2                      
 118   2                      add %= 10;
 119   2                      scan_key();
 120   2                      updat_time();
 121   2                      buf = load_time[0]*60;
 122   2                      buf += load_time[1];
 123   2                      buf *= 60;
 124   2                      buf += load_time[2];
 125   2                      
 126   2                      buf -= (time_data[4]*260 + time_data[5]*60 + time_data[6]);
 127   2                      if(buf <= 0 && buf >= -5)
 128   2                              LED = 0;
 129   2                      else
 130   2                              LED = 1;
 131   2                      
 132   2                      display_all();
 133   2                      //dely_US(300);
 134   2              }
 135   1      
 136   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1807    ----
   CONSTANT SIZE    =    695    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     89      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
